/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/Auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["TokenRequest"];
                    "application/json": components["schemas"]["TokenRequest"];
                    "text/json": components["schemas"]["TokenRequest"];
                    "application/*+json": components["schemas"]["TokenRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TokenResponse"];
                        "application/json": components["schemas"]["TokenResponse"];
                        "text/json": components["schemas"]["TokenResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Drafts/{setupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    skip?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["DraftListResponse"];
                        "application/json": components["schemas"]["DraftListResponse"];
                        "text/json": components["schemas"]["DraftListResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["DraftCreateDataDto"];
                    "application/json": components["schemas"]["DraftCreateDataDto"];
                    "text/json": components["schemas"]["DraftCreateDataDto"];
                    "application/*+json": components["schemas"]["DraftCreateDataDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["DraftCreateResponse"];
                        "application/json": components["schemas"]["DraftCreateResponse"];
                        "text/json": components["schemas"]["DraftCreateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Drafts/{draftId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: {
                    content?: string;
                };
                header?: never;
                path: {
                    draftId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["DraftUpdateResponse"];
                        "application/json": components["schemas"]["DraftUpdateResponse"];
                        "text/json": components["schemas"]["DraftUpdateResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    draftId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["DraftDeleteResponse"];
                        "application/json": components["schemas"]["DraftDeleteResponse"];
                        "text/json": components["schemas"]["DraftDeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Schemas/{setupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    skip?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SchemaListResponse"];
                        "application/json": components["schemas"]["SchemaListResponse"];
                        "text/json": components["schemas"]["SchemaListResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SchemaCreateResponse"];
                        "application/json": components["schemas"]["SchemaCreateResponse"];
                        "text/json": components["schemas"]["SchemaCreateResponse"];
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: {
                    schemaId?: string;
                };
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SchemaDeleteResponse"];
                        "application/json": components["schemas"]["SchemaDeleteResponse"];
                        "text/json": components["schemas"]["SchemaDeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Setups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    skip?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SetupListResponse"];
                        "application/json": components["schemas"]["SetupListResponse"];
                        "text/json": components["schemas"]["SetupListResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["SetupCreateRequest"];
                    "application/json": components["schemas"]["SetupCreateRequest"];
                    "text/json": components["schemas"]["SetupCreateRequest"];
                    "application/*+json": components["schemas"]["SetupCreateRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SetupCreateResponse"];
                        "application/json": components["schemas"]["SetupCreateResponse"];
                        "text/json": components["schemas"]["SetupCreateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Setups/{setupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SetupResponse"];
                        "application/json": components["schemas"]["SetupResponse"];
                        "text/json": components["schemas"]["SetupResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    setupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SetupDeleteResponse"];
                        "application/json": components["schemas"]["SetupDeleteResponse"];
                        "text/json": components["schemas"]["SetupDeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Setups/by-name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SetupResponse"];
                        "application/json": components["schemas"]["SetupResponse"];
                        "text/json": components["schemas"]["SetupResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DraftCreateDataDto: {
            schemaId?: string | null;
            content?: string | null;
        };
        DraftCreateResponse: {
            draft?: components["schemas"]["DraftDto"];
        };
        DraftDeleteResponse: Record<string, never>;
        DraftDto: {
            id?: string | null;
            setupId?: string | null;
            schemaId?: string | null;
            content?: string | null;
            authorId?: string | null;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            modified?: string;
        };
        DraftListResponse: {
            drafts?: components["schemas"]["DraftDto"][] | null;
        };
        DraftUpdateResponse: {
            draft?: components["schemas"]["DraftDto"];
        };
        SchemaCreateResponse: {
            schema?: components["schemas"]["SchemaDto"];
        };
        SchemaDeleteResponse: Record<string, never>;
        SchemaDto: {
            id?: string | null;
            setupId?: string | null;
            name?: string | null;
            content?: string | null;
            authorId?: string | null;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            modified?: string;
        };
        SchemaListResponse: {
            schemas?: components["schemas"]["SchemaDto"][] | null;
        };
        SetupCreateRequest: {
            name?: string | null;
        };
        SetupCreateResponse: {
            setup?: components["schemas"]["SetupDto"];
        };
        SetupDeleteResponse: Record<string, never>;
        SetupDto: {
            id?: string | null;
            name?: string | null;
            /** Format: date-time */
            created?: string;
            branchToCopyFromId?: string | null;
            copyingMode?: string | null;
            copyVersionMinimalStage?: string | null;
        };
        SetupListResponse: {
            setups?: components["schemas"]["SetupDto"][] | null;
        };
        SetupResponse: {
            setup?: components["schemas"]["SetupDto"];
        };
        TokenRequest: {
            username?: string | null;
            password?: string | null;
        };
        TokenResponse: {
            access_token?: string | null;
            token_type?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
